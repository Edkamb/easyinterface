def eiout():
    tag = "eiout"
    attrs = {
        "version": {
            "minimun": 0,
            "type": "version",
            "desc": "Indicates the version of the output language that is used"
        }
    }
    childs = {
        "eicommands": {
            "minimun": 0,
            "maximun": float('Inf')
        },
        "eiactions": {
            "minimun": 0,
            "maximun": float('Inf')
        }
    }
    desc = ("This is the main environment of the output," +
            " it includes several lists of command environments," +
            " and several lists of action environments. Commands are" +
            " executed first, in the given order, and then actions are" +
            " executed in the given order as well.")
    return (tag, attrs, childs, desc)


def eicommands():
    tag = "eicommands"
    attrs = {
        "dest": {
            "minimun": 0,
            "type": "ei-path",
            "desc": ("The destination file on which the command is" +
                     " applied (if needed)")
        },
        "outclass": {
            "minimun": 0,
            "type": ["error", "info", "warning"],
            "desc": ("The output class of the commands in this environment," +
                     " that is, the nature of the corresponding output" +
                     " generated by the commands, e.g., error, information," +
                     " warning, etc.")
        }
    }
    childs = {
        "printonconsole": {
            "minimun": 0,
            "maximun": float('Inf')
        },
        "highlightlines": {
            "minimun": 0,
            "maximun": float('Inf')
        },
        "dialogbox": {
            "minimun": 0,
            "maximun": float('Inf')
        },
        "dialogbox": {
            "minimun": 0,
            "maximun": float('Inf')
        },
        "setcss": {
            "minimun": 0,
            "maximun": float('Inf')
        },
        "changecontent": {
            "minimun": 0,
            "maximun": float('Inf')
        },
        "addmarker": {
            "minimun": 0,
            "maximun": float('Inf')
        },
        "addinlinemarker": {
            "minimun": 0,
            "maximun": float('Inf')
        },
        "download": {
            "minimun": 0,
            "maximun": float('Inf')
        }
    }
    desc = "A list of commands to be performed."
    return (tag, attrs, childs, desc)


def eiactions():
    tag = "eiactions"
    attrs = {
        "dest": {
            "minimun": 0,
            "type": "ei-path",
            "desc": ("The destination file on which the command is" +
                     " applied (if needed)")
        },
        "outclass": {
            "minimun": 0,
            "type": "outclass",
            "desc": ("The output class of the commands in this environment," +
                     " that is, the nature of the corresponding output" +
                     " generated by the commands, e.g., error, information," +
                     " warning, etc.")
        },
        "autoclean": {
            "minimun": 0,
            "type": "bool",
            "desc": ""
        }
    }
    childs = {
        "oncodelineclick": {
            "minimun": 0,
            "maximun": float('Inf')
        },
        "onclick": {
            "minimun": 0,
            "maximun": float('Inf')
        }
    }
    desc = "A a list of actions to be declared."
    return (tag, attrs, childs, desc)


def command_print():
    tag = "printonconsole"
    attrs = {
        "outclass": {
            "minimun": 0,
            "type": ["error", "info", "warning"],
            "desc": ""
        },
        "consoleid": {
            "minimun": 0,
            "type": "word",
            "desc": ""
        },
        "consoletitle": {
            "minimun": 0,
            "type": "string",
            "desc": ""
        }
    }
    childs = {
        "content": {
            "minimun": 1,
            "maximun": float('Inf')
        }
    }
    desc = "Prints the content described in it."
    return (tag, attrs, childs, desc)


def command_highlightlines():
    tag = "highlightlines"
    attrs = {
        "outclass": {
            "minimun": 0,
            "type": ["error", "info", "warning"],
            "desc": ""
        },
        "dest": {
            "minimun": 0,
            "type": "ei-path",
            "desc": "reference to file"
        }
    }
    childs = {
        "lines": {
            "minimun": 0,
            "maximun": float('Inf')
        }
    }
    desc = "Highlights the lines specified inside."
    return (tag, attrs, childs, desc)


def command_dialogbox():
    tag = "dialogbox"
    attrs = {
        "outclass": {
            "minimun": 0,
            "type": ["error", "info", "warning"],
            "desc": ""
        },
        "boxtitle": {
            "minimun": 0,
            "type": "string",
            "desc": ""
        },
        "boxwidth": {
            "minimun": 0,
            "type": "int",
            "desc": ""
        },
        "boxheight": {
            "minimun": 0,
            "type": "int",
            "desc": ""
        }
    }
    childs = {
        "content": {
            "minimun": 1,
            "maximun": float('Inf')
        }
    }
    desc = "Opens a dialog box with the content specified inside."
    return (tag, attrs, childs, desc)


def command_writefile():
    tag = "writefile"
    attrs = {
        "filename": {
            "minimun": 1,
            "type": "ei-path",
            "desc": ""
        },
        "overwrite": {
            "minimun": 1,
            "type": ["true", "false"],
            "desc": ""
        }
    }
    childs = {
        "text": {
            "minimun": 1,
            "maximun": 1
        }
    }
    desc = "Creates a new file it in the file-manager."
    return (tag, attrs, childs, desc)


def command_setcss():
    tag = "setcss"
    attrs = {}
    childs = {
        "elements": {
            "minimun": 1,
            "maximun": 1
        },
        "cssproperties": {
            "minimun": 1,
            "maximun": 1
        }
    }
    desc = ""
    return (tag, attrs, childs, desc)


def command_changecontent():
    tag = "changecontent"
    attrs = {
        "action": {
            "minimun": 1,
            "type": ["replace", "append", "prepend"],
            "desc": ""
        }
    }
    childs = {
        "elements": {
            "minimun": 1,
            "maximun": 1
        },
        "content": {
            "minimun": 1,
            "maximun": 1
        }
    }
    desc = ""
    return (tag, attrs, childs, desc)


def command_addmarker():
    tag = "addmarker"
    attrs = {
        "outclass": {
            "minimun": 0,
            "type": ["error", "info", "warning"],
            "desc": ""
        },
        "dest": {
            "minimun": 0,
            "type": "ei-path",
            "desc": "reference to file"
        },
        "boxtitle": {
            "minimun": 0,
            "type": "string",
            "desc": ""
        },
        "boxwidth": {
            "minimun": 0,
            "type": "int",
            "desc": ""
        },
        "boxheight": {
            "minimun": 0,
            "type": "int",
            "desc": ""
        }
    }
    childs = {
        "lines": {
            "minimun": 1,
            "maximun": 1
        },
        "content": {
            "minimun": 0,
            "maximun": float('Inf')
        }
    }
    desc = ""
    return (tag, attrs, childs, desc)


def command_addinlinemarker():
    tag = "addinlinemarker"
    attrs = {
        "outclass": {
            "minimun": 0,
            "type": ["error", "info", "warning"],
            "desc": ""
        },
        "dest": {
            "minimun": 0,
            "type": "ei-path",
            "desc": "reference to file"
        }
    }
    childs = {
        "lines": {
            "minimun": 1,
            "maximun": 1
        },
        "content": {
            "minimun": 0,
            "maximun": float('Inf')
        }
    }
    desc = ""
    return (tag, attrs, childs, desc)


def command_download():
    tag = "download"
    attrs = {
        "execid": {
            "minimun": 1,
            "type": "word",
            "desc": ""
        },
        "filename": {
            "minimun": 1,
            "type": "string",
            "desc": ""
        }
    }
    childs = {}
    desc = ""
    return (tag, attrs, childs, desc)


def action_oncodelineclick():
    tag = "oncodelineclick"
    attrs = {
        "outclass": {
            "minimun": 0,
            "type": ["warning", "error", "info"],
            "desc": ""
        },
        "dest": {
            "minimun": 0,
            "type": "ei-path",
            "desc": "reference to file"
        },
        "autoclean": {
            "minimun": 0,
            "type": ["true", "false"],
            "desc": ""
        }
    }
    childs = {
        "lines": {
            "minimun": 1,
            "maximun": 1
        },
        "content": {
            "minimun": 0,
            "maximun": float('Inf')
        },
        "eicommands": {
            "minimun": 1,
            "maximun": 1
        }
    }
    desc = ""
    return (tag, attrs, childs, desc)


def action_onclick():
    tag = "onclick"
    attrs = {
        "outclass": {
            "minimun": 0,
            "type": ["error", "info", "warning"],
            "desc": ""
        },
        "autoclean": {
            "minimun": 0,
            "type": ["true", "false"],
            "desc": ""
        }
    }
    childs = {
        "elements": {
            "minimun": 1,
            "maximun": 1
        },
        "eicommands": {
            "minimun": 1,
            "maximun": 1
        }
    }
    desc = ""
    return (tag, attrs, childs, desc)


def lines():
    tag = "lines"
    attrs = {}
    childs = {
        "line": {
            "minimun": 1,
            "maximun": float('Inf')
        }
    }
    desc = ""
    return (tag, attrs, childs, desc)


def line():
    tag = "line"
    attrs = {
        "from": {
            "minimun": 1,
            "type": "int",
            "desc": ""
        },
        "to": {
            "minimun": 0,
            "type": "int",
            "desc": ""
        },
        "fromch": {
            "minimun": 0,
            "type": "int",
            "desc": ""
        },
        "toch": {
            "minimun": 0,
            "type": "int",
            "desc": ""
        }
    }
    childs = {}
    desc = ""
    return (tag, attrs, childs, desc)


def elements():
    tag = "elements"
    attrs = {}
    childs = {
        "selector": {
            "minimun": 0,
            "maximun": float('Inf')
        }
    }
    desc = ""
    return (tag, attrs, childs, desc)


def selector():
    tag = "selector"
    attrs = {
        "value": {
            "minimun": 1,
            "type": "string",
            "desc": ""
        }
    }
    childs = {}
    desc = ""
    return (tag, attrs, childs, desc)


def cssproperties():
    tag = "cssproperties"
    attrs = {}
    childs = {
        "cssproperty": {
            "minimun": 0,
            "maximun": float('Inf')
        }
    }
    desc = ""
    return (tag, attrs, childs, desc)


def cssproperty():
    tag = "cssproperty"
    attrs = {
        "name": {
            "minimun": 1,
            "type": "string",
            "desc": ""
        },
        "value": {
            "minimun": 1,
            "type": "string",
            "desc": ""
        }
    }
    childs = {}
    desc = ""
    return (tag, attrs, childs, desc)


def content():
    tag = "content"
    attrs = {
        "format": {
            "minimun": 0,
            "type": ["html", "svg", "text", "graph"],
            "desc": ""
        },
        "execid": {
            "minimun": 0,
            "type": "word",
            "desc": ""
        },

        "ext": {
            "minimun": 0,
            "type": "word",
            "desc": ""
        },
        "action": {
            "minimun": 0,
            "type": ["replace", "append", "prepend"],
            "desc": ""
        },
        "refreshrate": {
            "minimun": 0,
            "type": "int",
            "desc": ""
        }
    }
    childs = {
        "text": {
            "minimun": 1,
            "maximun": 1
        }
    }
    desc = ""
    return (tag, attrs, childs, desc)
